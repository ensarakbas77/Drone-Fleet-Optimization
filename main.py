from utils.data_loader import load_json_lines
from project.graph_builder import build_graph
from project.genetic_algorithm import run_ga
from utils.visualizer import plot_delivery_routes

def main():
    # ğŸ”§ Buradan senaryoyu sabit olarak ayarlayabilirsin
    senaryo = "senaryo1"  # "senaryo2" ile deÄŸiÅŸtirilebilir

    print(f"\nğŸš€ Drone Teslimat PlanlayÄ±cÄ± baÅŸlatÄ±ldÄ± â†’ {senaryo}")

    # 1. Verileri yÃ¼kle
    drones = load_json_lines(f"data/drones_{senaryo}.txt")
    deliveries = load_json_lines(f"data/deliveries_{senaryo}.txt")
    noflyzones = load_json_lines(f"data/noflyzones_{senaryo}.txt")

    # 2. Teslimat noktalarÄ±nÄ±n pozisyonlarÄ±nÄ± Ã§Ä±kar
    positions = {d['id']: d['pos'] for d in deliveries}

    # 3. Her droneâ€™a geÃ§ici start_node ata (basitÃ§e ilk teslimatlar)
    for i, drone in enumerate(drones):
        drone['start_node'] = deliveries[i % len(deliveries)]['id']

    # 4. GrafÄ± oluÅŸtur
    graph = build_graph(deliveries)

    # 5. Genetik algoritmayÄ± Ã§alÄ±ÅŸtÄ±r
    best_solution, best_score = run_ga(
        drones, deliveries, graph, positions, noflyzones,
        gen=10, pop_size=8
    )

    # 6. SonuÃ§larÄ± yazdÄ±r
    print("\nğŸ§¬ En iyi plan:")
    for drone_id, delivery_ids in best_solution.items():
        print(f"  Drone {drone_id} â†’ Teslimatlar: {delivery_ids}")
    print(f"ğŸ“Š En iyi skor: {round(best_score, 2)}")

    # 7. GÃ¶rselleÅŸtirme
    plot_delivery_routes(drones, deliveries, best_solution, noflyzones)

if __name__ == "__main__":
    main()
